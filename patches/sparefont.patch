--- st.orig/config.def.h
+++ st/config.def.h
@@ -6,6 +6,8 @@
  * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
  */
 static char *font = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";
+static char *sparefont = "LiterationMono Nerd Font:pixelsize=12:antialias=true:autohint=true";
+
 static int borderpx = 2;
 
 /*
--- st.orig/x.c
+++ st/x.c
@@ -160,6 +160,8 @@ static void xhints(void);
 static int xloadcolor(int, const char *, Color *);
 static int xloadfont(Font *, FcPattern *);
 static void xloadfonts(const char *, double);
+static int xloadsparefont(FcPattern *, int);
+static void xloadsparefonts(void);
 static void xunloadfont(Font *);
 static void xunloadfonts(void);
 static void xsetenv(void);
@@ -325,6 +327,7 @@ zoomabs(const Arg *arg)
 {
 	xunloadfonts();
 	xloadfonts(usedfont, arg->f);
+	xloadsparefonts();
 	cresize(0, 0);
 	redraw();
 	xhints();
@@ -1080,6 +1083,93 @@ xloadfonts(const char *fontstr, double f
 	FcPatternDestroy(pattern);
 }
 
+int
+xloadsparefont(FcPattern *pattern, int flags)
+{
+	FcPattern *match;
+	FcResult result;
+
+	match = FcFontMatch(NULL, pattern, &result);
+	if (!match)
+		return 1;
+
+	if (!(frc[frclen].font = XftFontOpenPattern(xw.dpy, match))) {
+		FcPatternDestroy(match);
+		return 1;
+	}
+
+	frc[frclen].flags = flags;
+	/* Believe U+0000 glyph will present in each default font */
+	frc[frclen].unicodep = 0;
+	frclen++;
+
+	return 0;
+}
+
+void
+xloadsparefonts(void)
+{
+	FcPattern *pattern;
+	double sizeshift, fontval;
+
+	if (sparefont[0] == '\0')
+		return;
+
+	if (frclen != 0)
+		die("can't embed spare fonts. cache isn't empty");
+
+	/* Allocate memory for cache entries. */
+	if (frccap < 16) {
+		frccap += 16;
+		frc = xrealloc(frc, frccap * sizeof(Fontcache));
+	}
+
+	if (sparefont[0] == '-')
+		pattern = XftXlfdParse(sparefont, False, False);
+	else
+		pattern = FcNameParse((const FcChar8 *)sparefont);
+
+	if (!pattern)
+		die("can't open spare font %s\n", sparefont);
+
+	if (defaultfontsize > 0) {
+		sizeshift = usedfontsize - defaultfontsize;
+		if (sizeshift != 0 &&
+				FcPatternGetDouble(pattern, FC_PIXEL_SIZE, 0, &fontval) ==
+				FcResultMatch) {
+			fontval += sizeshift;
+			FcPatternDel(pattern, FC_PIXEL_SIZE);
+			FcPatternDel(pattern, FC_SIZE);
+			FcPatternAddDouble(pattern, FC_PIXEL_SIZE, fontval);
+		}
+	}
+
+	FcPatternAddBool(pattern, FC_SCALABLE, 1);
+
+	FcConfigSubstitute(NULL, pattern, FcMatchPattern);
+	XftDefaultSubstitute(xw.dpy, xw.scr, pattern);
+
+	if (xloadsparefont(pattern, FRC_NORMAL))
+		die("can't open spare font %s\n", sparefont);
+
+	FcPatternDel(pattern, FC_SLANT);
+	FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ITALIC);
+	if (xloadsparefont(pattern, FRC_ITALIC))
+		die("can't open spare font %s\n", sparefont);
+
+	FcPatternDel(pattern, FC_WEIGHT);
+	FcPatternAddInteger(pattern, FC_WEIGHT, FC_WEIGHT_BOLD);
+	if (xloadsparefont(pattern, FRC_ITALICBOLD))
+		die("can't open spare font %s\n", sparefont);
+
+	FcPatternDel(pattern, FC_SLANT);
+	FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ROMAN);
+	if (xloadsparefont(pattern, FRC_BOLD))
+		die("can't open spare font %s\n", sparefont);
+
+	FcPatternDestroy(pattern);
+}
+
 void
 xunloadfont(Font *f)
 {
@@ -1189,6 +1279,9 @@ xinit(int cols, int rows)
 	usedfont = (opt_font == NULL)? font : opt_font;
 	xloadfonts(usedfont, 0);
 
+	/* spare fonts */
+	xloadsparefonts();
+
 	/* colors */
 	xw.cmap = XCreateColormap(xw.dpy, parent, xw.vis, None);
 	defaultalpha = alpha;
